//
// THIS FILE WAS AUTOMATICALLY GENERATED BY read_writer_gen.go
//

// Copyright 2016 Rafael Lorandi <coolparadox@gmail.com>
// This file is part of Raw, a binary encoder of Go types.
//
// Raw is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Raw is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Raw. If not, see <http://www.gnu.org/licenses/>.

package raw

//
// Implementation of io.ReadWriter for Encoder
//

func (e uint8Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e uint8Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e uint16Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e uint16Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e uint32Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e uint32Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e uint64Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e uint64Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e int8Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e int8Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e int16Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e int16Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e int32Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e int32Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e int64Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e int64Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e float32Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e float32Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e float64Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e float64Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e complex64Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e complex64Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e complex128Encoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e complex128Encoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e boolEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e boolEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e stringEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e stringEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e arrayEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e arrayEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e sliceEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e sliceEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e structEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e structEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e ptrEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e ptrEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}

func (e mapEncoder) Read(p []byte) (int, error) {
	return readEncoder(e, p)
}

func (e mapEncoder) Write(p []byte) (int, error) {
	return writeEncoder(e, p)
}
